generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model polls {
  id                    Int                      @id
  question              String
  published             Boolean                  @default(false)
  active                Boolean                  @default(false)
  guild_id              BigInt
  choices               String[]
  time                  DateTime?                @db.Timestamptz(6)
// duration              Interval?               // not supported in Prisma yet
  num                   Int?
  message_id            BigInt?
  crosspost_message_ids BigInt[]
  tag                   Int
  image                 String?
  description           String?
  thread_question       String?
  show_question         Boolean                  @default(true)
  show_options          Boolean                  @default(true)
  show_voting           Boolean                  @default(true)
  fallback              Boolean                  @default(false)

  votesRelation         pollsvotes[]             @relation("PollVotes")
  tagRelation           pollstags?               @relation("PollstagsToPolls", fields: [tag], references: [tag])
}

model pollsinfo {
  guild_id            BigInt   @id
  default_channel_id  BigInt
  manage_channel_id   BigInt[]
  manager_role_id     BigInt[]
  default_colour      Int?
  fallback_channel_id BigInt?
}

model pollstags {
  tag                     Int      @id
  name                    String
  guild_id                BigInt
  channel_id              BigInt
  crosspost_channels      BigInt[]
  crosspost_servers       BigInt[]
  current_num             Int?
  colour                  Int?
  end_message             String?
  end_message_latest_ids  BigInt[]
  end_message_replace     Boolean  @default(false)
  end_message_role_ids    BigInt[]
  end_message_ping        Boolean  @default(false)
  end_message_self_assign Boolean  @default(false)
  persistent              Boolean  @default(true)
  
  pollsRelation           polls[]  @relation("PollstagsToPolls")
}

model pollsvotes {
  id      BigInt @id(map: "pollsvotesnew_pkey")
  user_id BigInt
  poll_id Int
  choice  Int
  
  poll      polls      @relation("PollVotes", fields: [poll_id], references: [id])
}

/// View mapped model for `polls_view` created in the database.
/// Read-only; use prisma.$queryRaw or select from this model for conveniences.
model polls_view {
  id                    Int      @id
  question              String
  published             Boolean
  active                Boolean
  guild_id              BigInt
  choices               String[]
  time                  DateTime? @db.Timestamptz(6)
  num                   Int?
  message_id            BigInt?
  crosspost_message_ids BigInt[]
  tag                   Int
  image                 String?
  description           String?
  thread_question       String?
  show_question         Boolean
  show_options          Boolean
  show_voting           Boolean
  fallback              Boolean

  vote_count            Int

  @@map("polls_view")
}
